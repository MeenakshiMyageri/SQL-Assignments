-- 1. Rank the customers based on the total amount they've spent on rentals.
		use mavenmovies;
		SELECT 
			customer_id, 
			SUM(amount) AS total_spent,
			RANK() OVER (ORDER BY SUM(amount) DESC) AS customer_rank
		FROM Payment
		GROUP BY customer_id;
        
-- 2. Calculate the cumulative revenue generated by each film over time.
		use mavenmovies;
		SELECT 
			f.film_id, 
			title, 
			payment_date,
			SUM(amount) OVER (PARTITION BY film_id ORDER BY payment_date) AS cumulative_revenue
		FROM Payment p
		JOIN Rental r ON p.rental_id = r.rental_id
		JOIN Inventory i ON r.inventory_id = i.inventory_id
		JOIN Film f ON i.film_id = f.film_id;

-- 3. Determine the average rental duration for each film, considering films with similar lengths.
		use mavenmovies;
		SELECT 
			f.film_id, 
			title, 
			AVG(DATEDIFF(return_date, rental_date)) OVER (PARTITION BY length) AS avg_rental_duration
		FROM Rental r
		JOIN Inventory i ON r.inventory_id = i.inventory_id
		JOIN Film f ON i.film_id = f.film_id;
        
-- 4. Identify the top 3 films in each category based on their rental counts.
		use mavenmovies;
		SELECT 
			category_id, 
			film_id, 
			title, 
			rental_count
		FROM (
			SELECT 
				fc.category_id,
				f.film_id,
				f.title,
				COUNT(r.rental_id) AS rental_count,
				ROW_NUMBER() OVER (PARTITION BY fc.category_id ORDER BY COUNT(r.rental_id) DESC) AS rank_in_category
			FROM Film_category fc
			JOIN Film f ON fc.film_id = f.film_id
			JOIN Inventory i ON f.film_id = i.film_id
			JOIN Rental r ON i.inventory_id = r.inventory_id
			GROUP BY fc.category_id, f.film_id, f.title
		) AS ranked_films
		WHERE rank_in_category <= 3;

-- 5. Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.
		use mavenmovies;
		WITH CustomerRentals AS (
			SELECT 
				customer_id, 
				COUNT(rental_id) AS total_rentals
			FROM Rental
			GROUP BY customer_id
		),
		AverageRentals AS (
			SELECT AVG(total_rentals) AS avg_rentals FROM CustomerRentals
		)
		SELECT 
			cr.customer_id, 
			cr.total_rentals, 
			ar.avg_rentals,
			(cr.total_rentals - ar.avg_rentals) AS difference_from_avg
		FROM CustomerRentals cr
		CROSS JOIN AverageRentals ar;

-- 6. Find the monthly revenue trend for the entire rental store over time.
		use mavenmovies;
		SELECT 
			DATE_FORMAT(payment_date, '%Y-%m') AS month, 
			SUM(amount) AS total_revenue
		FROM Payment
		GROUP BY DATE_FORMAT(payment_date, '%Y-%m')
		ORDER BY month;
        
-- 7. Identify the customers whose total spending on rentals falls within the top 20% of all customers.
		use mavenmovies;
		WITH CustomerSpending AS (
			SELECT 
				customer_id, 
				SUM(amount) AS total_spent
			FROM Payment
			GROUP BY customer_id
		),
		RankedSpending AS (
			SELECT 
				customer_id, 
				total_spent,
				NTILE(5) OVER (ORDER BY total_spent DESC) AS percentile_rank
			FROM CustomerSpending
		)
		SELECT 
			customer_id, 
			total_spent
		FROM RankedSpending
		WHERE percentile_rank = 1;


-- 8. Calculate the running total of rentals per category, ordered by rental count.
		use mavenmovies;
		SELECT 
			category_id, 
			film_id, 
			title, 
			rental_count,
			SUM(rental_count) OVER (PARTITION BY category_id ORDER BY rental_count DESC) AS running_total
		FROM (
			SELECT 
				fc.category_id,
				f.film_id,
				f.title,
				COUNT(r.rental_id) AS rental_count
			FROM Film_category fc
			JOIN Film f ON fc.film_id = f.film_id
			JOIN Inventory i ON f.film_id = i.film_id
			JOIN Rental r ON i.inventory_id = r.inventory_id
			GROUP BY fc.category_id, f.film_id, f.title
		) AS subquery;


-- 9. Find the films that have been rented less than the average rental count for their respective categories.
		use mavenmovies;
		WITH CategoryAverages AS (
			SELECT 
				category_id, 
				AVG(rental_count) AS avg_rentals
			FROM (
				SELECT 
					fc.category_id, 
					f.film_id, 
					COUNT(r.rental_id) AS rental_count
				FROM Film_category fc
				JOIN Film f ON fc.film_id = f.film_id
				JOIN Inventory i ON f.film_id = i.film_id
				JOIN Rental r ON i.inventory_id = r.inventory_id
				GROUP BY fc.category_id, f.film_id
			) AS category_counts
			GROUP BY category_id
		)
		SELECT 
			fc.category_id, 
			f.film_id, 
			f.title, 
			COUNT(r.rental_id) AS rental_count
		FROM Film_category fc
		JOIN Film f ON fc.film_id = f.film_id
		JOIN Inventory i ON f.film_id = i.film_id
		JOIN Rental r ON i.inventory_id = r.inventory_id
		GROUP BY fc.category_id, f.film_id, f.title
		HAVING COUNT(r.rental_id) < (
			SELECT avg_rentals 
			FROM CategoryAverages ca 
			WHERE ca.category_id = fc.category_id
		);



-- 10. Identify the top 5 months with the highest revenue and display the revenue generated in each month.
		use mavenmovies;
		SELECT 
			month, 
			total_revenue
		FROM (
			SELECT 
				DATE_FORMAT(payment_date, '%Y-%m') AS month, 
				SUM(amount) AS total_revenue,
				ROW_NUMBER() OVER (ORDER BY SUM(amount) DESC) AS revenue_rank
			FROM Payment
			GROUP BY DATE_FORMAT(payment_date, '%Y-%m')
		) AS monthly_revenue
		WHERE revenue_rank <= 5;


